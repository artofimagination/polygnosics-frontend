version: '3'
networks:
  poly_frontend:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.18.0.0/24    

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.3
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # Allow access through :443 and:80
      - --entrypoints.web.address=:80 
      - --entrypoints.websecure.address=:443
      # Development access to dashboard 
      - --api.insecure
      # Production dashboard
      # - --api
      # Setup docker provider
      - --providers.docker
      #- --providers.docker.exposedbydefault=false

      # Setup automatic TLS certificate generation. Disabled for local dev.
      # - --certificatesresolvers.le.acme.caserver=${ACME_ADDRESS}
      # - --certificatesresolvers.le.acme.email=${ACME_ACCOUNT}
      # - --certificatesresolvers.le.acme.storage=/acme.json
      # - --certificatesresolvers.le.acme.tlschallenge=true
    ports:
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    networks:
      - poly_frontend
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configuration/acme.json:/acme.json
    # labels:
      # Dashboard (enable https dashboard)
      # - "traefik.http.routers.traefik.rule=Host(`${API_HOST}`)"
      # - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.middlewares=admin"
      # - "traefik.http.routers.traefik.tls.certresolver=le"
      # - "traefik.http.routers.traefik.entrypoints=websecure"
      # Allow BasicAuth check. Only in conjuncion with https
      # - "traefik.http.middlewares.admin.basicauth.users=admin:polyadmin"
  frontend:
    build: ./
    image: artofimagination/polygnosics
    labels:
      # Define the host the request shall target
      - traefik.http.routers.platform.rule=Host(`${PUBLIC_HOST}`)
      # Define automatic cert generation resolver. Disabled for local dev.
      # - traefik.http.routers.platform.middlewares=auth
      # - traefik.http.routers.platform.tls.certresolver=le
      # - traefik.http.routers.platform.entrypoints=websecure
      # Redirect non-https middleware requests
      # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # Catch everything
      # - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)
      # - traefik.http.routers.redirs.entrypoints=web"
      # - traefik.http.routers.redirs.middlewares=redirect-to-https
      # Sticky session for loadbalancing (round robin)
      #- traefik.http.services.platform.loadBalancer.sticky.cookie=true
      # Port the server instances can be accessed through
      - traefik.http.services.platform.loadbalancer.server.port=8081
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USER_STORE}:${USER_STORE_DOCKER}
    networks: 
      - poly_frontend
    depends_on:
      - reverse-proxy